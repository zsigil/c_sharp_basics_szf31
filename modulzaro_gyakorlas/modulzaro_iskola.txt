1. project létrehozása: windows form

2. adatbázis létrehozása - solution explorer -> add new item - service-based database
server explorerben, és solution explorerben is látszik! properties: copy if newer


- 3 tábla elvileg csak akkor kell, ha egy tanuló több iskolába is járhat?!


create table iskola (isk_azon varchar(50) not null primary key, 
isk_neve varchar(50), 
isk_varos varchar(50), 
isk_irszam varchar(50), 
isk_utca varchar(50));


CREATE TABLE [dbo].[tanulo]
(
	[tan_azon] VARCHAR(50) NOT NULL PRIMARY KEY, 
    [tan_nev] VARCHAR(50) NULL, 
    [tan_szul] DATE NULL, 
    [tan_varos] VARCHAR(50) NULL, 
    [tan_irszam] VARCHAR(50) NULL, 
    [tan_utca] VARCHAR(50) NULL, 
    [tan_anyjaneve] VARCHAR(50) NULL, 
    [tan_oszt] VARCHAR(50) NULL, 
    [tan_atlag] FLOAT NULL
)



CREATE TABLE [dbo].[iskolatanulo]
(
	[Id] INT NOT NULL PRIMARY KEY, 
    [iskazon] VARCHAR(50) NOT NULL, 
    [tanazon] VARCHAR(50) NOT NULL, 
    CONSTRAINT [FK_iskolatanulo_tanulo] FOREIGN KEY ([tanazon]) REFERENCES [tanulo]([tan_azon]), 
    CONSTRAINT [FK_iskolatanulo_iskola] FOREIGN KEY ([iskazon]) REFERENCES [iskola]([isk_azon])
);

INSERT INTO iskola values('abcdef2', 'Petõfi Sándor Ált Isk', 'Gödöllõ', '2100', 'Levendula u 3.', '28/123-456');
INSERT INTO iskola values('abcdef3', 'Kossuth Lajos Ált Isk', 'Budapest', '1113', 'Karaván u 3.', '1/1234-456');
INSERT INTO iskola values('abcdef4', 'Nagy Pagony Ált Isk', 'Bugyi', '5063', 'Kutya u 5.', '42/123-456');
INSERT INTO iskola values('abcdef5', 'Kis Pagony Ált Isk', 'iassszonyfalva', '7240', 'Béka u 10.', '23/123-456');

INSERT INTO tanulo values('abc1', 'Kis Béci', '2008.10.02', 'Gödöllõ', '2100', 'Lovász utca 2.', 'Nagy Mariska', '5.b', 3.4);
INSERT INTO tanulo values('abc2', 'Nagy Lajos', '2007.02.05', 'Budapest', '1117', 'Lovász utca 12.', 'Nagy Juliska', '4.c', 4.4);
INSERT INTO tanulo values('abc3', 'Csöpp Beáta', '2008.11.02', 'Budapest', '1134', 'Kisrigó utca 2.', 'Nagy Lola', '10.b', 5.0);
INSERT INTO tanulo values('abc4', 'Zöld Virág', '2008.09.02', 'Budapest', '1216', 'Lovász utca 5.', 'Kiss Éva', '7.a', 3.9);
INSERT INTO tanulo values('abc5', 'Kovács Aranka', '2008.01.12', 'Gyöngyös', '2567', 'Petõfi utca 2.', 'Kovács Mariann', '3.d', 2.4);



INSERT INTO iskolatanulo values(1, 'abcdef3', 'abc2');
INSERT INTO iskolatanulo values(2, 'abcdef3', 'abc3');
INSERT INTO iskolatanulo values(3, 'abcdef3', 'abc4');
INSERT INTO iskolatanulo values(4, 'abcdef2', 'abc1');
INSERT INTO iskolatanulo values(5, 'abcdef5', 'abc5');



3. OOP adatbáziskezelés: minden tábla egy osztály(public class), minden oszlop private adattag lesz(kisbetûvel) (amihez írunk gettert meg settert - az publikuslesz, nagybetûs!)
	
solution expl - jobb egér - add- class -elnevezni-add -> megnyílik, ide dolgozunk


(server explorerben látszik a tábla, table definition mutatja, mi milyen típus)

-primary key-nél setnél ellenõrizni kell, h nincs még egy olyan! - nálam ez az azonosító.

- mivel példányosítani akarjuk, kell szegénynek konstruktor (egy, amiben az összes cucc benne van, meg egy, amibõl kimarad a primary key, a módosításokhoz)

(ezt megcsináljuk az iskola táblánál, és a tanuló táblánál is)


4. statikus adatbáziskezelõ osztály létrehozása  - (add class)
https://github.com/zsigil/c_sharp_basics_szf31/blob/master/20181028/oop_db_kezeles/oop_db_kezeles/Adatbaziskezelo.cs

-public static class
+using System.Data.SqlClient
+using System.Windows.Forms 

2 privát adattag: static SqlConnection conn, static SqlCommand comm;
konstruktor : statikus!: try/catch
	conn =new SqlConnection (connection stringet kiszedni a datasource-ból! add new datasource-nál)
	conn.Open()

konstruktoron kívül kapcsolat bezárása public static void metódussal
utána adatbáziskezeléshez metódusok(public static void)

adatbázis beolvasása - listába, readerrel(public static List<Iskola>)
**********************************
listview - Form1.cs
https://github.com/zsigil/c_sharp_basics_szf31/blob/master/20181028/oop_db_kezeles/oop_db_kezeles/Form1.cs
form 1 loadban beolvasni az adatbázist, listview megjelenítést meghívni
külön function a különbözõ megjelenítésekre, a partial class-ban(pl. listview megjelenítés) -> mûködnie kell
*********************************
adatbáziskezelo.cs -ben létrehozzuk a metódusokat  az új iskola létrehozásához, módosításához(lásd könyves példa,
csak Iskola osztállyal)

*****
Form1.design-ban 6 label, 6 textbox az iskolához
gomb az új iskolának : eseménykezelõ ->


***************************
UNITTEST : tesztelni kívánt metódus: legyen benne "throw new exception", ezt fogjuk elkapni; jobb egérgomb metódus nevén:
create unit tests
https://github.com/zsigil/c_sharp_basics_szf31/blob/master/20181028/oop_db_kezeles/oop_db_kezelesTests/Konyv1Tests.cs

**************************
iskola adatainak módosítása
-adatbáziskezelõben már megvan a metódus
-gomb kell hozzá, eseménykezelõ->
módosít: elõbb kiszedni a listviewbõl, hogy melyiket(indexof)
az adatbázisban, meg a listában is le kell kezelni!
https://github.com/zsigil/c_sharp_basics_szf31/blob/master/modulzaro_gyakorlas/modulzaro_gyakorlas_iskola/modulzaro_gyakorlas_iskola/Form1.cs
***************************


tanuló datagrid készítése + rögzít, töröl, módosít
(tanuló adatbázis táblája, saját osztálya már kész!)
-> adatbáziskezelõ.cs
	1. beolvas (lásd iskolánál), töröl, módosít

-> datagridview-t formra ráhúzni
-> form1.cs -> form loadnál lista behívása, datagridview
https://github.com/zsigil/c_sharp_basics_szf31/blob/master/20181028/oop_db_kezeles/oop_db_kezeles/Form1.cs
- labelek, textboxok , gombok az új tanulóhoz, ill módosításhoz, törléshez, ua, mint iskola

*******************************

ösztöndíj számolása:
új button, kijelzés textboxban